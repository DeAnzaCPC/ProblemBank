// Place your snippets for c++ here. Each snippet is defined under a snippet name and has a prefix, body and 
// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
// same ids are connected.
// Example:
// "Print to console": {
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }

{
	"ttemplate": {
	"prefix": "ttemplate",
	"body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"",
		"void solve(){",
		"    $0",
		"",
		"}",
		"",
		"int main(){",
		"    ios::sync_with_stdio(false); cin.tie(nullptr);",
		"    int T = 1;",
		"    cin >> T;",
		"    for(int i = 1; i <= T; i++) {",
		"        solve();",
		"    }",
		"}"
	],
	"description": "c++ template"
	},

	"template": {
		"prefix": "template",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main(){",
			"    ios::sync_with_stdio(false); cin.tie(nullptr);",
			"    $0",
			"}"
		],
		"description": "c++ template"
	},
	
	"freopen": {
		"prefix": "openfile",
		"body": [
			"freopen(\"in.txt\",\"r\",stdin); freopen(\"out.txt\",\"w\",stdout);"
		],
		"description": "use file input output"
	},

	"vector vector int": {
		"prefix": "vvi",
		"body": "vector<vector<int>> $1($2, vector<int>($3));",
		"description": "vector vector int"
	},

	"vector vector long long": {
		"prefix": "vvll",
		"body": "vector<vector<long long>> $1($2, vector<long long>($3));",
		"description": "vector vector long long"
	},

	"vector int": {
		"prefix": "vi",
		"body": "vector<int>",
		"description": "vector int"
	},

	"popcount": {
		"prefix": "popcount",
		"body": "__builtin_popcount($0)",
		"description": "g++ builtin popcount shortcut"
	}
}