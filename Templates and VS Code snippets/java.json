{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	  "template": {
		"prefix": "template",
		"body": [
		  "import java.io.*;",
		  "import java.util.*;",
		  "",
		  "public class ${TM_FILENAME_BASE} {",
		  "    FastScanner sc;",
		  "    ",
		  "",
		  "    void run(){",
		  "        sc = new FastScanner();",
		  "        $0",
		  "",
		  "    }",
		  "",
		  "",
		  "",
		  "    public static void main(String[] args) {",
		  "        ${TM_FILENAME_BASE} solution = new ${TM_FILENAME_BASE}();",
		  "        solution.run();",
		  "    }",
		  "",
		  "    static class FastScanner {",
		  "        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));",
		  "        StringTokenizer st=new StringTokenizer(\"\");",
		  "        String next() {",
		  "            while (!st.hasMoreTokens())",
		  "                try {",
		  "                    st=new StringTokenizer(br.readLine());",
		  "                } catch (IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "            return st.nextToken();",
		  "        }",
		  "",
		  "        int nextInt() {",
		  "            return Integer.parseInt(next());",
		  "        }",
		  "        int[] readArray(int n) {",
		  "            int[] a=new int[n];",
		  "            for (int i=0; i<n; i++) a[i]=nextInt();",
		  "            return a;",
		  "        }",
		  "        long nextLong() {",
		  "            return Long.parseLong(next());",
		  "        }",
		  "        double nextDouble() {",
		  "            return Double.parseDouble(next());",
		  "        }",
		  "        String nextLine() {",
		  "            try {",
		  "                return br.readLine();",
		  "            } catch(IOException e) {",
		  "                throw new RuntimeException(e);",
		  "            }",
		  "        }",
		  "    }",
		  "}",
		  ""
		],
		"description": "Java competitive programming template"
	  }
}